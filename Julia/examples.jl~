
function sample_rdn(sz::Int,noise_p::Float64)
    


class Fun_Data_rdn:
    def __init__(self):
        self.n_u=self.n_v=0
        self.n_w=2
    def fun(self,y,z,w):
        return w,w,w
    def noise(self,x):
        x  = ( x +random.randint(0,1) )%2
        return x
    def true_input_distrib(self):
        return {(0,0,0):.5, (1,1,1):.5}
    def true_result_distrib(self):
        return {(0,0,0):.5, (1,1,1):.5}
    def true_CI(self):
        return 0
    def true_SI(self):
        return 1


the_available_functions["RDN"] = Fun_Data_rdn


class Fun_Data_unq:
    def __init__(self):
        self.n_u=self.n_v=2
        self.n_w=0
    def fun(self,y,z,w):
        return (y,z),y,z
    def noise(self,x):
        y,z  = x
        y = ( y +random.randint(0,1) )%2
        z = ( z +random.randint(0,1) )%2
        return y,z
    def true_input_distrib(self):
        return {((0,0),0,0):.25, ((0,1),0,1):.25, ((1,0),1,0):.25, ((1,1),1,1):.25}
    def true_result_distrib(self):
        return {((0,0),0,0):.25, ((0,1),0,1):.25, ((1,0),1,0):.25, ((1,1),1,1):.25}
    def true_CI(self):
        return 0 # this is a mistake in BROJA'14
    def true_SI(self):
        return 0
the_available_functions["UNQ"] = Fun_Data_unq()


class Fun_Data_xor:
    def __init__(self):
        self.n_u=self.n_v=2
        self.n_w=0
    def fun(self,y,z,w):
        return (y+z)%2,y,z
    def noise(self,x):
        x  = ( x +random.randint(0,1) )%2
        return x
    def true_input_distrib(self):
        return {(0,0,0):.25, (1,0,1):.25, (1,1,0):.25, (0,1,1):.25}
    def true_result_distrib(self):
        return {(0,0,0):.25, (1,0,1):.25, (1,1,0):.25, (0,1,1):.25}
    def true_CI(self):
        return 1
    def true_SI(self):
        return 0
the_available_functions["XOR"] = Fun_Data_xor()



class Fun_Data_and:
    def __init__(self):
        self.n_u=self.n_v=2
        self.n_w=0
    def fun(self,y,z,w):
        return (y*z)%2,y,z
    def noise(self,x):
        x  = ( x +random.randint(0,1) )%2
        return x
    def true_input_distrib(self):
        return {(0,0,0):.25, (0,0,1):.25, (0,1,0):.25, (1,1,1):.25}
    def true_result_distrib(self):
        return { (0,0,0): .5, (0,1,1): .25, (1,1,1): .25 }
    def true_CI(self):
        return .5
    def true_SI(self):
        return .311278124459132843017578125 # I hope
the_available_functions["AND"] = Fun_Data_and()


class Fun_Data_rdnxor:
    def __init__(self):
        self.n_u=self.n_v=self.n_w=2
    def fun(self,y,z,w):
        return ((y+z)%2,w), (y,w), (z,w)
    def noise(self,x):
        x1,w = x
        x1 = ( x1+random.randint(0,1) )%2
        w  = ( w +random.randint(0,1) )%2
        return x1,w
    def true_input_distrib(self):
        return {
            ((0,0), (0,0), (0,0)): .125,
            ((1,0), (0,0), (1,0)): .125,
            ((1,0), (1,0), (0,0)): .125,
            ((0,0), (1,0), (1,0)): .125,
            ((0,1), (0,1), (0,1)): .125,
            ((1,1), (0,1), (1,1)): .125,
            ((1,1), (1,1), (0,1)): .125,
            ((0,1), (1,1), (1,1)): .125
        }
    def true_result_distrib(self):
        return {((0, 0), (0, 0), (0, 0)):0.0625, ((0, 0), (0, 0), (1, 0)):0.0625, ((0, 0), (1, 0), (0, 0)):0.0625, ((0, 0), (1, 0), (1, 0)):0.0625, ((0, 1), (0, 1), (0, 1)):0.0625, ((0, 1), (0, 1), (1, 1)):0.0625, ((0, 1), (1, 1), (0, 1)):0.0625, ((0, 1), (1, 1), (1, 1)):0.0625, ((1, 0), (0, 0), (0, 0)):0.0625, ((1, 0), (0, 0), (1, 0)):0.0625, ((1, 0), (1, 0), (0, 0)):0.0625, ((1, 0), (1, 0), (1, 0)):0.0625, ((1, 1), (0, 1), (0, 1)):0.0625, ((1, 1), (0, 1), (1, 1)):0.0625, ((1, 1), (1, 1), (0, 1)):0.0625, ((1, 1), (1, 1), (1, 1)):0.0625}
    def true_CI(self):
        return 1
    def true_SI(self):
        return 1
the_available_functions["RDNXOR"] = Fun_Data_rdnxor()

class Fun_Data_rdnunqxor:
    def __init__(self):
        self.n_u=self.n_v=4
        self.n_w=2
    def fun(self,y,z,w):
        y1 = y%2
        y2 = y//2
        z1 = z%2
        z2 = z//2
        return ((y1+z1)%2,y2,z2,w), (y,w), (z,w)
    def noise(self,x):
        x1,y2,z2,w = x
        x1 = ( x1+random.randint(0,1) )%2
        y2 = ( y2+random.randint(0,1) )%2
        z2 = ( z2+random.randint(0,1) )%2
        w  = ( w +random.randint(0,1) )%2
        return x1,y2,z2,w
    def true_input_distrib(self):
        return {
            ((0,0,0,0), (0,0), (0,0)): 1/32,
            ((1,0,0,0), (0,0), (1,0)): 1/32,
            ((0,0,1,0), (0,0), (2,0)): 1/32,
            ((1,0,1,0), (0,0), (3,0)): 1/32,
            ((1,0,0,0), (1,0), (0,0)): 1/32,
            ((0,0,0,0), (1,0), (1,0)): 1/32,
            ((1,0,1,0), (1,0), (2,0)): 1/32,
            ((0,0,1,0), (1,0), (3,0)): 1/32,
            ((0,1,0,0), (2,0), (0,0)): 1/32,
            ((1,1,0,0), (2,0), (1,0)): 1/32,
            ((0,1,1,0), (2,0), (2,0)): 1/32,
            ((1,1,1,0), (2,0), (3,0)): 1/32,
            ((1,1,0,0), (3,0), (0,0)): 1/32,
            ((0,1,0,0), (3,0), (1,0)): 1/32,
            ((1,1,1,0), (3,0), (2,0)): 1/32,
            ((0,1,1,0), (3,0), (3,0)): 1/32,
            ((0,0,0,1), (0,1), (0,1)): 1/32,
            ((1,0,0,1), (0,1), (1,1)): 1/32,
            ((0,0,1,1), (0,1), (2,1)): 1/32,
            ((1,0,1,1), (0,1), (3,1)): 1/32,
            ((1,0,0,1), (1,1), (0,1)): 1/32,
            ((0,0,0,1), (1,1), (1,1)): 1/32,
            ((1,0,1,1), (1,1), (2,1)): 1/32,
            ((0,0,1,1), (1,1), (3,1)): 1/32,
            ((0,1,0,1), (2,1), (0,1)): 1/32,
            ((1,1,0,1), (2,1), (1,1)): 1/32,
            ((0,1,1,1), (2,1), (2,1)): 1/32,
            ((1,1,1,1), (2,1), (3,1)): 1/32,
            ((1,1,0,1), (3,1), (0,1)): 1/32,
            ((0,1,0,1), (3,1), (1,1)): 1/32,
            ((1,1,1,1), (3,1), (2,1)): 1/32,
            ((0,1,1,1), (3,1), (3,1)): 1/32
        }
    def true_result_distrib(self):
        return {((0, 0, 0, 0), (0, 0), (0, 0)):1/64, ((0, 0, 0, 0), (0, 0), (1, 0)):1/64, ((0, 0, 0, 0), (1, 0), (0, 0)):1/64, ((0, 0, 0, 0), (1, 0), (1, 0)):1/64, ((0, 0, 0, 1), (0, 1), (0, 1)):1/64, ((0, 0, 0, 1), (0, 1), (1, 1)):1/64, ((0, 0, 0, 1), (1, 1), (0, 1)):1/64, ((0, 0, 0, 1), (1, 1), (1, 1)):1/64, ((0, 0, 1, 0), (0, 0), (2, 0)):1/64, ((0, 0, 1, 0), (0, 0), (3, 0)):1/64, ((0, 0, 1, 0), (1, 0), (2, 0)):1/64, ((0, 0, 1, 0), (1, 0), (3, 0)):1/64, ((0, 0, 1, 1), (0, 1), (2, 1)):1/64, ((0, 0, 1, 1), (0, 1), (3, 1)):1/64, ((0, 0, 1, 1), (1, 1), (2, 1)):1/64, ((0, 0, 1, 1), (1, 1), (3, 1)):1/64, ((0, 1, 0, 0), (2, 0), (0, 0)):1/64, ((0, 1, 0, 0), (2, 0), (1, 0)):1/64, ((0, 1, 0, 0), (3, 0), (0, 0)):1/64, ((0, 1, 0, 0), (3, 0), (1, 0)):1/64, ((0, 1, 0, 1), (2, 1), (0, 1)):1/64, ((0, 1, 0, 1), (2, 1), (1, 1)):1/64, ((0, 1, 0, 1), (3, 1), (0, 1)):1/64, ((0, 1, 0, 1), (3, 1), (1, 1)):1/64, ((0, 1, 1, 0), (2, 0), (2, 0)):1/64, ((0, 1, 1, 0), (2, 0), (3, 0)):1/64, ((0, 1, 1, 0), (3, 0), (2, 0)):1/64, ((0, 1, 1, 0), (3, 0), (3, 0)):1/64, ((0, 1, 1, 1), (2, 1), (2, 1)):1/64, ((0, 1, 1, 1), (2, 1), (3, 1)):1/64, ((0, 1, 1, 1), (3, 1), (2, 1)):1/64, ((0, 1, 1, 1), (3, 1), (3, 1)):1/64, ((1, 0, 0, 0), (0, 0), (0, 0)):1/64, ((1, 0, 0, 0), (0, 0), (1, 0)):1/64, ((1, 0, 0, 0), (1, 0), (0, 0)):1/64, ((1, 0, 0, 0), (1, 0), (1, 0)):1/64, ((1, 0, 0, 1), (0, 1), (0, 1)):1/64, ((1, 0, 0, 1), (0, 1), (1, 1)):1/64, ((1, 0, 0, 1), (1, 1), (0, 1)):1/64, ((1, 0, 0, 1), (1, 1), (1, 1)):1/64, ((1, 0, 1, 0), (0, 0), (2, 0)):1/64, ((1, 0, 1, 0), (0, 0), (3, 0)):1/64, ((1, 0, 1, 0), (1, 0), (2, 0)):1/64, ((1, 0, 1, 0), (1, 0), (3, 0)):1/64, ((1, 0, 1, 1), (0, 1), (2, 1)):1/64, ((1, 0, 1, 1), (0, 1), (3, 1)):1/64, ((1, 0, 1, 1), (1, 1), (2, 1)):1/64, ((1, 0, 1, 1), (1, 1), (3, 1)):1/64, ((1, 1, 0, 0), (2, 0), (0, 0)):1/64, ((1, 1, 0, 0), (2, 0), (1, 0)):1/64, ((1, 1, 0, 0), (3, 0), (0, 0)):1/64, ((1, 1, 0, 0), (3, 0), (1, 0)):1/64, ((1, 1, 0, 1), (2, 1), (0, 1)):1/64, ((1, 1, 0, 1), (2, 1), (1, 1)):1/64, ((1, 1, 0, 1), (3, 1), (0, 1)):1/64, ((1, 1, 0, 1), (3, 1), (1, 1)):1/64, ((1, 1, 1, 0), (2, 0), (2, 0)):1/64, ((1, 1, 1, 0), (2, 0), (3, 0)):1/64, ((1, 1, 1, 0), (3, 0), (2, 0)):1/64, ((1, 1, 1, 0), (3, 0), (3, 0)):1/64, ((1, 1, 1, 1), (2, 1), (2, 1)):1/64, ((1, 1, 1, 1), (2, 1), (3, 1)):1/64, ((1, 1, 1, 1), (3, 1), (2, 1)):1/64, ((1, 1, 1, 1), (3, 1), (3, 1)):1/64}
    def true_CI(self):
        return 1
    def true_SI(self):
        return 1
the_available_functions["RDNUNQXOR"] = Fun_Data_rdnunqxor()


class Fun_Data_xorand:
    def __init__(self):
        self.n_u=self.n_v=2
        self.n_w=0
    def fun(self,y,z,w):
        return ((y+z)%2,y*z), y, z
    def noise(self,x):
        x1,x2 = x
        return ( x1+random.randint(0,1) )%2, ( x2+random.randint(0,1) )%2
    def true_input_distrib(self):
        return {
            ((0,0), 0, 0): .25,
            ((1,0), 0, 1): .25,
            ((1,0), 1, 0): .25,
            ((0,1), 1, 1): .25,
        }
    def true_result_distrib(self):
        return {((0, 0), 0, 0):0.25, ((0, 1), 1, 1):0.25, ((1, 0), 0, 0):0.25, ((1, 0), 1, 1):0.25}
    def true_CI(self):
        return 1
    def true_SI(self):
        return 1/2
the_available_functions["XORAND"] = Fun_Data_xorand()
